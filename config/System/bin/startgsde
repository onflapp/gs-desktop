#!/usr/bin/env bash

function show_status {
  if [ -n "$1" ];then
    echo "status: $1"
    /System/bin/wmshowstatus "$1" $2 || exit 1
  else
    /System/bin/wmshowstatus
  fi
}

function start_windowmanager {
  show_status "starting windowmanager" "gray45"
  /System/bin/wmaker $WM_ARGS
  show_status "stopping windowmanager" "gray45"
}

function continue_in_wm  {
  echo "windowmanager running on $WMAKER_BIN_PID"
  echo "$WMAKER_BIN_PID" > /tmp/$UID-wm.pid

  echo "about to autostart apps"
  /Library/Scripts/AutoLaunchApps

  echo "about to start Notification Monitor"
  /System/Applications/NotMon.app/NotMon -GSSuppressAppIcon YES -autolaunch YES &
  echo "$!" > /tmp/$UID-notmon.pid

  echo "about to start Gesture Helper"
  /System/Applications/GestureHelper.app/GestureHelper -GSSuppressAppIcon YES -autolaunch YES &
  echo "$!" > /tmp/$UID-ghelper.pid
}

function start_services {
  show_status "about to start gdomap" "gray15"
  /Library/bin/defaults write NSGlobalDomain NSPortIsMessagePort NO
  /Library/bin/defaults write NSGlobalDomain NSHostNameIsLocalhost YES

  /Library/bin/gdomap -f &
  echo "$!" > /tmp/$UID-gdomap.pid
  sleep 0.5

  show_status "about to start Notification Center" "gray20"
  /Library/bin/gdnc --daemon &
  echo "$!" > /tmp/$UID-gdnc.pid
  sleep 0.5

  show_status "about to start Pasteboard Service" "gray25"
  /Library/bin/gpbs --daemon &
  echo "$!" > /tmp/$UID-gpbs.pid
  sleep 0.3

  # needed to start synchronizing the X11 CLIPBOARD
  echo " " | /Library/bin/nxpasteboard --copy

  # needed to start PA audio sever
  /Library/bin/nxaudio --status

  show_status "about to start fswatcher Service" "gray30"
  /Library/bin/fswatcher --daemon &
  echo "$!" > /tmp/$UID-fswatcher.pid
  sleep 0.3

  show_status "about to start ddbd Service" "gray35"
  /Library/bin/ddbd --daemon &
  echo "$!" > /tmp/$UID-ddbd.pid
  sleep 0.3

  show_status "making services" "gray40"
  /Library/bin/make_services
}

function _kill_proc {
  PID=`cat /tmp/$UID-$1.pid 2>/dev/null`
  if [ -n "$PID" ];then
    kill $PID 2> /dev/null 
    rm /tmp/$UID-$1.pid
    sleep 0.3
  fi
}

function stop_services {
  show_status "about to stop ddbd Service"
  _kill_proc ddbd

  show_status "about to stop fswatcher Service"
  _kill_proc fswatcher

  show_status "about to stop Notification Monitor"
  _kill_proc notmon

  show_status "about to stop Gesture Helper"
  _kill_proc ghelper

  show_status "about to stop Pasteboard Service"
  _kill_proc gpbs

  show_status "about to stop Notification Center"
  _kill_proc gdnc

  show_status "about to stop gdomap"
  _kill_proc gdomap
}

function init_config {
  show_status "init config" "gray10"

  if [ ! -f "$HOME/Library/etc/GSDE.conf" ];then
    echo "init user defaults"
    mkdir "$HOME/Library" 2>/dev/null
    cp -fR /etc/skel/Library/* "$HOME/Library"
  fi
 
  if [ ! -f "$HOME/Library/WindowMaker/Defaults/WindowMaker" ];then
    echo "init WindowMaker defaults"
    /System/bin/wmaker.inst --batch
    cp /System/etc/WindowMaker/WMRootMenu "$HOME/Library/WindowMaker/Defaults"
  fi

  if [ ! -f "$HOME/Library/Preferences/NSGlobalDomain.plist" ];then
    echo "init user preferences defaults"
    mkdir "$HOME/Library/Preferences" 2>/dev/null
    cp /Library/Preferences/* "$HOME/Library/Preferences/"

    mkdir "$HOME/Library/Preferences/.NextSpace" 2>/dev/null
    cp /Library/Preferences/.NextSpace/* "$HOME/Library/Preferences/.NextSpace"
  fi

  TZ=`defaults read NSGlobalDomain "Local Time Zone" 2>/dev/null`
  TZ=${TZ:33}
  if [ -n "$TZ" ]; then
    echo "setting session timezone to $TZ"
    export TZ
  else
    TZ=`cat /etc/timezone`
    echo "setting default timezone to $TZ"
    defaults write NSGlobalDomain "Local Time Zone" $TZ
  fi

  T="/tmp/$UID-gs-desktop.locale"
  /System/bin/mklocalconfig > "$T"
  source "$T"
  if [ -n "$LANG" ];then
    echo "desktop locale set to $LANG"
    export LANG
  fi
  if [ -n "$GNUSTEP_STRING_ENCODING" ];then
    echo "set default encoding to $GNUSTEP_STRING_ENCODING"
    export GNUSTEP_STRING_ENCODING
  fi

  defaults read NSGlobalDomain "GSBackend" 2>&1 > /dev/null
  if [ $? -ne 0 ]; then
    echo "setting default backend to Cairo"
    defaults write NSGlobalDomain "GSBackend" "cairo"
  fi

  /System/bin/mkfontconfig
  if [ -f "$HOME/Library/etc/fonts.conf" ];then
    export FONTCONFIG_FILE=$HOME/Library/etc/fonts.conf
  fi
 
  wdwrite WMWindowAttributes 'GSDE-Safe-Mode.XTerm'  '{ DontSaveSession = Yes; NoAppIcon = Yes; StartMiniaturized = Yes; Omnipresent = Yes; }'
  wdwrite WMWindowAttributes 'GWorkspace.GNUstep'    '{ DontSaveSession = Yes; NoAppIcon = Yes; }'
  wdwrite WMWindowAttributes 'GestureHelper.GNUstep' '{ DontSaveSession = Yes; NoAppIcon = Yes; }'
  wdwrite WMWindowAttributes 'NotMon.GNUstep'        '{ DontSaveSession = Yes; SkipWindowList = Yes; SkipSwitchPanel = Yes; NoAppIcon = Yes; KeepOnTop = Yes; Omnipresent = Yes; }'
  wdwrite WMWindowAttributes 'NotMon.MessageWindow'  '{ Unfocusable = Yes; }'
 
  if [ -f "$HOME/.gsderc" ];then
    echo "sourcing $HOME/.gsderc"
    source "$HOME/.gsderc"
  fi
}

function start_debug {
  WM_ARGS="--no-autolaunch --static --dont-restore"

  show_status "starting debug session" "black"
  init_config
  main_process
  cleanup
}

function save_screen {
  autorandr --force -s gsdesktop
}

function restore_screen {
  show_status "restoring screen"
  autorandr -c
}

function start_normal {
  WM_ARGS="--no-autolaunch --dont-restore"

  show_status "starting normal session" "black"
  restore_screen
  init_config
  main_process
  save_screen
  cleanup
}

function main_process {
  start_services
  start_windowmanager
}

function cleanup {
  echo "cleaning up..."

  echo "make sure GWorkspace terminates"
  /Library/bin/nxworkspace --terminate 2>/dev/null
  sleep 0.5
 
  stop_services

  show_status "the end" "black"
  echo -e "\e[3;0;0t\ePtmux;\e\e[3;0;0t\e\\"

  sleep 0.5
  pkill -P "$$"
  exit 0
}

if [ "$1" == "--continue-in-wm" ];then
  continue_in_wm
  exit 0
fi

if [ "$UID" -eq 0 ];then
  echo "GNUstep Desktop cannot run as root"
  exit 1
fi

if ! xset b 0 ;then
  if [ -n "$DISPLAY" ];then
    echo "unable to open $DISPLAY"
    exit 1
  else
    echo "executing startx"
    exec startx /System/bin/startgsde $*
  fi
fi

echo "=================================================="
echo " Starting GNUstep Desktop"
echo "=================================================="

if [ "$1" == "--safe-mode-continue" ];then
  export GS_DESKTOP_SAFEMODE="safe"
  echo ""

  echo "you are running in the safe mode"
  echo "WARNING: you will not be able to modify the dock!"
  echo ""
  echo "use use the following commands to start:"
  echo ""
  echo " /System/bin/startgsde        - start the desktop"
  echo " /System/bin/startgsde-xnest  - use separate Xserver (Xnest)"
  echo " /System/bin/startgsde-wmaker - start the wm (very limited!)"
  echo ""

  exec $SHELL
fi

if [ "$1" == "--safe-mode" ];then
  exec xterm -xrm '*.allowWindowOps:true' -bg black -fg gray -bd green -geometry 160x24+0+0 -name GSDE-Safe-Mode -e "$0" --safe-mode-continue
fi

show_status "the beginning" "black"

## clean up
rm -R "/tmp/GNUstepSecure$UID" 2>/dev/null

## set system env variables
export WMAKER_USER_ROOT="$HOME/Library/WindowMaker"
export PATH="/System/bin:/Library/bin:$HOME/Library/Scripts:/Library/Scripts:$PATH"
export MANPATH=":/System/share/man:/Library/Documentation/man"
export GS_DESKTOP_LOG="/tmp/$UID-gs-desktop.log"
export GS_DESKTOP_ID="$$"
export BROWSER="/Library/bin/nxbrowser"

## unset envs in case we are running from a terminal window
unset XTERM_VERSION
unset XTERM_SHELL
unset XTERM_LOCAL

source /Developer/Makefiles/GNUstep.sh

WM_ARGS=""

if [ -t 0 ];then
  echo "running interactive"
  trap cleanup SIGINT
fi

if [ -n "$GS_DESKTOP_SAFEMODE" ];then
  echo "running in SAFE mode"
  if [ "$GS_DESKTOP_SAFEMODE" = "xnest" ];then
    echo "logging to $GS_DESKTOP_LOG"
    start_debug > $GS_DESKTOP_LOG 2>&1
  else
    start_debug |& tee $GS_DESKTOP_LOG
  fi
else
  start_normal > $GS_DESKTOP_LOG 2>&1
fi
